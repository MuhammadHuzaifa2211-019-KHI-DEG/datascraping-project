{"ast":null,"code":"var _jsxFileName = \"/home/muhammadhassanraza/Documents/data_scrap_front_end/Data_scraping_front_end/src/Component/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Dashboard.css\";\nimport \"jspdf-autotable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [userData, setUserData] = useState([]);\n  const [csvData, setCsvData] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [jobData, setJobData] = useState([]);\n  useEffect(() => {\n    fetchData();\n    fetchDataa();\n    const intervalId = setInterval(() => {\n      setCurrentIndex(prevIndex => prevIndex + 1);\n    }, 5 * 1000); // 10-second interval\n\n    return () => clearInterval(intervalId);\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const jsonData = await response.json();\n      setUserData(jsonData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const fetchDataa = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5003/other_data\");\n      const data = await response.json();\n      setJobData(data);\n      const csvData = JSON.stringify(data, null, 2);\n      setCsvData(csvData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const downloadCSV = () => {\n    const formattedCSVData = formatCSV(csvData);\n    const href = `data:text/csv;charset=utf-8,${encodeURIComponent(formattedCSVData)}`;\n    const a = document.createElement(\"a\");\n    a.href = href;\n    a.download = \"filename.csv\";\n    a.click();\n  };\n  const formatCSV = csvData => {\n    const lines = csvData.split(\"\\n\");\n    const formattedLines = [];\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      let formattedLine = line.split(\",\");\n      formattedLine = formattedLine.map(cell => {\n        return cell.trim();\n      });\n      formattedLines.push(formattedLine.join(\",\"));\n    }\n    return formattedLines.join(\"\\n\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), userData.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Company\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Company URL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Job Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Skills\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: jobData && /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: jobData.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: jobData.filename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: jobData.website\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                downloadCSV();\n              },\n              className: \"btn\",\n              children: \"download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Job Data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"a/ASKMFYw5UKz1N2q6ootggjV84=\");\n_c = Dashboard;\nexport default Dashboard;\n\n// Last Commit code\n\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//         fetchData();\n//         fetchDataa();\n\n//         const intervalId = setInterval(() => {\n//           setCurrentIndex((prevIndex) => prevIndex + 1);\n//         }, 5 * 1000); // 10-second interval\n\n//         return () => clearInterval(intervalId);\n//       }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://192.168.1.108:5000\");\n//       const data = await response.json();\n//       const csvData = JSON.stringify(data, null, 2);\n//       setCsvData(csvData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const downloadCSV = () => {\n//     const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//       csvData\n//     )}`;\n//     const a = document.createElement('a');\n//     a.href = href;\n//     a.download = 'filename.csv';\n//     a.click();\n//   };\n\n//   const formatCSV = (csvData) => {\n//     const lines = csvData.split('\\n');\n//     const formattedLines = [];\n//     for (let i = 0; i < lines.length; i++) {\n//       const line = lines[i];\n//       const formattedLine = line.split(',');\n//       formattedLine = formattedLine.map((cell) => {\n//         return cell.trim();\n//       });\n//       formattedLines.push(formattedLine);\n//     }\n//     return formattedLines.join('\\n');\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// // Jitnaw office mey hoa tha yay wo code hey.\n\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [dataInCSV, setDataInCSV] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000\");\n//       const data = await response.text();\n//       setDataInCSV(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td className=\"btn\">\n\n//                   {dataInCSV && (\n//                     <a\n//                       href={`data:text/csv;charset=utf-8,${encodeURIComponent(dataInCSV)}`}\n//                       download=\"filename.csv\"\n//                     >\n//                       download\n//                     </a>\n//                   )}\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n////////////////////\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n//............................................................. koi ek chalao\n// const fetchDataa = async () => {\n//   try {\n//     const response = await fetch(\"http://127.0.0.1:5000\");\n//     const data = await response.text();\n//     setDataInCSV(data);\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//   }\n// };\n// const downloadCSV = () => {\n//   const href = `data:text/csv;charset=utf-8,${encodeURIComponent(dataInCSV)}`;\n//   const a = document.createElement('a');\n//   a.href = href;\n//   a.download = 'filename.csv';\n//   a.click();\n// };\n\n//...................................................\n// const fetchDataa = async () => {\n//   try {\n//     const response = await fetch(\"http://127.0.0.1:5000\");\n//     const data = await response.json();\n//     const csvData = JSON.stringify(data, null, 2);\n//     const formattedData = formatCSV(csvData);\n//     csvData = formattedData;\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//   }\n// };\n\n// const downloadCSV = () => {\n//   const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//     csvData\n//   )}`;\n//   const a = document.createElement('a');\n//   a.href = href;\n//   a.download = 'filename.csv';\n//   a.click();\n// };\n\n// const formatCSV = (csvData) => {\n//   const lines = csvData.split('\\n');\n//   const formattedLines = [];\n//   for (let i = 0; i < lines.length; i++) {\n//     const line = lines[i];\n//     const formattedLine = line.split(',');\n//     formattedLine = formattedLine.map((cell) => {\n//       return cell.trim();\n//     });\n//     formattedLines.push(formattedLine);\n//   }\n//   return formattedLines.join('\\n');\n// };\n\n//....................................................\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Dashboard","_s","userData","setUserData","csvData","setCsvData","currentIndex","setCurrentIndex","jobData","setJobData","fetchData","fetchDataa","intervalId","setInterval","prevIndex","clearInterval","response","fetch","jsonData","json","error","console","data","JSON","stringify","downloadCSV","formattedCSVData","formatCSV","href","encodeURIComponent","a","document","createElement","download","click","lines","split","formattedLines","i","length","line","formattedLine","map","cell","trim","push","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","date","filename","website","onClick","_c","$RefreshReg$"],"sources":["/home/muhammadhassanraza/Documents/data_scrap_front_end/Data_scraping_front_end/src/Component/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Dashboard.css\";\nimport \"jspdf-autotable\";\n\nconst Dashboard = () => {\n  const [userData, setUserData] = useState([]);\n  const [csvData, setCsvData] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [jobData, setJobData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n    fetchDataa();\n\n    const intervalId = setInterval(() => {\n      setCurrentIndex((prevIndex) => prevIndex + 1);\n    }, 5 * 1000); // 10-second interval\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n      const jsonData = await response.json();\n      setUserData(jsonData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const fetchDataa = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5003/other_data\");\n      const data = await response.json();\n      setJobData(data);\n      const csvData = JSON.stringify(data, null, 2);\n      setCsvData(csvData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const downloadCSV = () => {\n    const formattedCSVData = formatCSV(csvData);\n    const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n      formattedCSVData\n    )}`;\n    const a = document.createElement(\"a\");\n    a.href = href;\n    a.download = \"filename.csv\";\n    a.click();\n  };\n\n  const formatCSV = (csvData) => {\n    const lines = csvData.split(\"\\n\");\n    const formattedLines = [];\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      let formattedLine = line.split(\",\");\n      formattedLine = formattedLine.map((cell) => {\n        return cell.trim();\n      });\n      formattedLines.push(formattedLine.join(\",\"));\n    }\n    return formattedLines.join(\"\\n\");\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>Dashboard</h1>\n      {userData.length > 0 ? (\n        <table>\n          <thead>\n            <tr>\n              <th>Category</th>\n              <th>Company</th>\n              <th>Company URL</th>\n              <th>Job Title</th>\n              <th>Location</th>\n              <th>Skills</th>\n              <th>Download</th>\n            </tr>\n          </thead>\n          <tbody>\n          {jobData && (\n  <tr>\n    <td>{jobData.date}</td>\n    <td>{jobData.filename}</td>\n    <td>{jobData.website}</td>\n    <td>\n      <button\n        onClick={() => {\n          downloadCSV();\n        }}\n        className=\"btn\"\n      >\n        download\n      </button>\n    </td>\n  </tr>\n)}\n\n          </tbody>\n        </table>\n      ) : (\n        <p>Loading Job Data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n\n// Last Commit code\n\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//         fetchData();\n//         fetchDataa();\n\n//         const intervalId = setInterval(() => {\n//           setCurrentIndex((prevIndex) => prevIndex + 1);\n//         }, 5 * 1000); // 10-second interval\n\n//         return () => clearInterval(intervalId);\n//       }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://192.168.1.108:5000\");\n//       const data = await response.json();\n//       const csvData = JSON.stringify(data, null, 2);\n//       setCsvData(csvData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const downloadCSV = () => {\n//     const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//       csvData\n//     )}`;\n//     const a = document.createElement('a');\n//     a.href = href;\n//     a.download = 'filename.csv';\n//     a.click();\n//   };\n\n//   const formatCSV = (csvData) => {\n//     const lines = csvData.split('\\n');\n//     const formattedLines = [];\n//     for (let i = 0; i < lines.length; i++) {\n//       const line = lines[i];\n//       const formattedLine = line.split(',');\n//       formattedLine = formattedLine.map((cell) => {\n//         return cell.trim();\n//       });\n//       formattedLines.push(formattedLine);\n//     }\n//     return formattedLines.join('\\n');\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// // Jitnaw office mey hoa tha yay wo code hey.\n\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [dataInCSV, setDataInCSV] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000\");\n//       const data = await response.text();\n//       setDataInCSV(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td className=\"btn\">\n\n//                   {dataInCSV && (\n//                     <a\n//                       href={`data:text/csv;charset=utf-8,${encodeURIComponent(dataInCSV)}`}\n//                       download=\"filename.csv\"\n//                     >\n//                       download\n//                     </a>\n//                   )}\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n////////////////////\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n//............................................................. koi ek chalao\n// const fetchDataa = async () => {\n//   try {\n//     const response = await fetch(\"http://127.0.0.1:5000\");\n//     const data = await response.text();\n//     setDataInCSV(data);\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//   }\n// };\n// const downloadCSV = () => {\n//   const href = `data:text/csv;charset=utf-8,${encodeURIComponent(dataInCSV)}`;\n//   const a = document.createElement('a');\n//   a.href = href;\n//   a.download = 'filename.csv';\n//   a.click();\n// };\n\n//...................................................\n// const fetchDataa = async () => {\n//   try {\n//     const response = await fetch(\"http://127.0.0.1:5000\");\n//     const data = await response.json();\n//     const csvData = JSON.stringify(data, null, 2);\n//     const formattedData = formatCSV(csvData);\n//     csvData = formattedData;\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//   }\n// };\n\n// const downloadCSV = () => {\n//   const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//     csvData\n//   )}`;\n//   const a = document.createElement('a');\n//   a.href = href;\n//   a.download = 'filename.csv';\n//   a.click();\n// };\n\n// const formatCSV = (csvData) => {\n//   const lines = csvData.split('\\n');\n//   const formattedLines = [];\n//   for (let i = 0; i < lines.length; i++) {\n//     const line = lines[i];\n//     const formattedLine = line.split(',');\n//     formattedLine = formattedLine.map((cell) => {\n//       return cell.trim();\n//     });\n//     formattedLines.push(formattedLine);\n//   }\n//   return formattedLines.join('\\n');\n// };\n\n//....................................................\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}