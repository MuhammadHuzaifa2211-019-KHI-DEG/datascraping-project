{"ast":null,"code":"\n\n// import React, { useEffect, useState } from \"react\";\n// import \"./Dashboard.css\";\n// import \"jspdf-autotable\";\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n//   const [jobData, setJobData] = useState([]);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch(\n//         \"https://jsonplaceholder.typicode.com/users\"\n//       );\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5003/other_data\");\n//       const data = await response.json();\n//       setJobData(data);\n//       const csvData = JSON.stringify(data, null, 2);\n//       setCsvData(csvData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const downloadCSV = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5003/latest_jobs\");\n//       const data = await response.json();\n\n//       let csvData = \"\";\n//       if (Array.isArray(data) && data.length > 0) {\n//         const headers = Object.keys(data[0]);\n//         csvData += headers.join(\",\") + \"\\n\";\n\n//         data.forEach((row) => {\n//           const values = headers.map((header) => {\n//             const value = row[header];\n//             return typeof value === \"string\" ? `\"${value}\"` : value;\n//           });\n//           csvData += values.join(\",\") + \"\\n\";\n//         });\n//       }\n\n//       const href = `data:text/csv;charset=utf-8,${encodeURIComponent(csvData)}`;\n//       const a = document.createElement(\"a\");\n//       a.href = href;\n//       a.download = \"job_data.csv\";\n//       a.click();\n//     } catch (error) {\n//       console.error(\"Error fetching job data:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Date</th>\n//               <th>File Name</th>\n//               <th>Company URL</th>\n//               <th>Download</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {jobData && (\n//               <tr>\n//                 <td>{jobData.date}</td>\n//                 <td>{jobData.filename}</td>\n//                 <td>{jobData.website}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading Job Data...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n/// last updated code\n// import React, { useEffect, useState } from \"react\";\n// import \"./Dashboard.css\";\n// import \"jspdf-autotable\";\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n//   const [jobData, setJobData] = useState([]);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch(\n//         \"https://jsonplaceholder.typicode.com/users\"\n//       );\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5003/other_data\");\n//       const data = await response.json();\n//       setJobData(data);\n//       const csvData = JSON.stringify(data, null, 2);\n//       setCsvData(csvData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const downloadCSV = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5003/latest_jobs\");\n//       const data = await response.json();\n\n//       let csvData = \"\";\n//       if (Array.isArray(data) && data.length > 0) {\n//         const headers = Object.keys(data[0]);\n//         csvData += headers.join(\",\") + \"\\n\";\n\n//         data.forEach((row) => {\n//           const values = headers.map((header) => {\n//             const value = row[header];\n//             return typeof value === \"string\" ? `\"${value}\"` : value;\n//           });\n//           csvData += values.join(\",\") + \"\\n\";\n//         });\n//       }\n\n//       const formattedCSVData = formatCSV(csvData);\n\n//       const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//         formattedCSVData\n//       )}`;\n//       const a = document.createElement(\"a\");\n//       a.href = href;\n//       a.download = \"job_data.csv\";\n//       a.click();\n//     } catch (error) {\n//       console.error(\"Error fetching job data:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Date</th>\n//               <th>File Name</th>\n//               <th>Company URL</th>\n\n//               <th>Download</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//           {jobData && (\n//   <tr>\n//     <td>{jobData.date}</td>\n//     <td>{jobData.filename}</td>\n//     <td>{jobData.website}</td>\n//     <td>\n//       <button\n//         onClick={() => {\n//           downloadCSV();\n//         }}\n//         className=\"btn\"\n//       >\n//         download\n//       </button>\n//     </td>\n//   </tr>\n// )}\n\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading Job Data...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// Last Commit code\n\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//         fetchData();\n//         fetchDataa();\n\n//         const intervalId = setInterval(() => {\n//           setCurrentIndex((prevIndex) => prevIndex + 1);\n//         }, 5 * 1000); // 10-second interval\n\n//         return () => clearInterval(intervalId);\n//       }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://192.168.1.108:5000\");\n//       const data = await response.json();\n//       const csvData = JSON.stringify(data, null, 2);\n//       setCsvData(csvData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const downloadCSV = () => {\n//     const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//       csvData\n//     )}`;\n//     const a = document.createElement('a');\n//     a.href = href;\n//     a.download = 'filename.csv';\n//     a.click();\n//   };\n\n//   const formatCSV = (csvData) => {\n//     const lines = csvData.split('\\n');\n//     const formattedLines = [];\n//     for (let i = 0; i < lines.length; i++) {\n//       const line = lines[i];\n//       const formattedLine = line.split(',');\n//       formattedLine = formattedLine.map((cell) => {\n//         return cell.trim();\n//       });\n//       formattedLines.push(formattedLine);\n//     }\n//     return formattedLines.join('\\n');\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// // Jitnaw office mey hoa tha yay wo code hey.\n\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [dataInCSV, setDataInCSV] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000\");\n//       const data = await response.text();\n//       setDataInCSV(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td className=\"btn\">\n\n//                   {dataInCSV && (\n//                     <a\n//                       href={`data:text/csv;charset=utf-8,${encodeURIComponent(dataInCSV)}`}\n//                       download=\"filename.csv\"\n//                     >\n//                       download\n//                     </a>\n//                   )}\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n////////////////////\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n//............................................................. koi ek chalao\n// const fetchDataa = async () => {\n//   try {\n//     const response = await fetch(\"http://127.0.0.1:5000\");\n//     const data = await response.text();\n//     setDataInCSV(data);\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//   }\n// };\n// const downloadCSV = () => {\n//   const href = `data:text/csv;charset=utf-8,${encodeURIComponent(dataInCSV)}`;\n//   const a = document.createElement('a');\n//   a.href = href;\n//   a.download = 'filename.csv';\n//   a.click();\n// };\n\n//...................................................\n// const fetchDataa = async () => {\n//   try {\n//     const response = await fetch(\"http://127.0.0.1:5000\");\n//     const data = await response.json();\n//     const csvData = JSON.stringify(data, null, 2);\n//     const formattedData = formatCSV(csvData);\n//     csvData = formattedData;\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//   }\n// };\n\n// const downloadCSV = () => {\n//   const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//     csvData\n//   )}`;\n//   const a = document.createElement('a');\n//   a.href = href;\n//   a.download = 'filename.csv';\n//   a.click();\n// };\n\n// const formatCSV = (csvData) => {\n//   const lines = csvData.split('\\n');\n//   const formattedLines = [];\n//   for (let i = 0; i < lines.length; i++) {\n//     const line = lines[i];\n//     const formattedLine = line.split(',');\n//     formattedLine = formattedLine.map((cell) => {\n//       return cell.trim();\n//     });\n//     formattedLines.push(formattedLine);\n//   }\n//   return formattedLines.join('\\n');\n// };\n\n//....................................................\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;","map":{"version":3,"names":[],"sources":["/home/muhammadhassanraza/Documents/data_scrap_front_end/Data_scraping_front_end/src/Component/Dashboard.js"],"sourcesContent":["\n\n\n// import React, { useEffect, useState } from \"react\";\n// import \"./Dashboard.css\";\n// import \"jspdf-autotable\";\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n//   const [jobData, setJobData] = useState([]);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch(\n//         \"https://jsonplaceholder.typicode.com/users\"\n//       );\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5003/other_data\");\n//       const data = await response.json();\n//       setJobData(data);\n//       const csvData = JSON.stringify(data, null, 2);\n//       setCsvData(csvData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const downloadCSV = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5003/latest_jobs\");\n//       const data = await response.json();\n\n//       let csvData = \"\";\n//       if (Array.isArray(data) && data.length > 0) {\n//         const headers = Object.keys(data[0]);\n//         csvData += headers.join(\",\") + \"\\n\";\n\n//         data.forEach((row) => {\n//           const values = headers.map((header) => {\n//             const value = row[header];\n//             return typeof value === \"string\" ? `\"${value}\"` : value;\n//           });\n//           csvData += values.join(\",\") + \"\\n\";\n//         });\n//       }\n\n//       const href = `data:text/csv;charset=utf-8,${encodeURIComponent(csvData)}`;\n//       const a = document.createElement(\"a\");\n//       a.href = href;\n//       a.download = \"job_data.csv\";\n//       a.click();\n//     } catch (error) {\n//       console.error(\"Error fetching job data:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Date</th>\n//               <th>File Name</th>\n//               <th>Company URL</th>\n//               <th>Download</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {jobData && (\n//               <tr>\n//                 <td>{jobData.date}</td>\n//                 <td>{jobData.filename}</td>\n//                 <td>{jobData.website}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading Job Data...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n\n/// last updated code\n// import React, { useEffect, useState } from \"react\";\n// import \"./Dashboard.css\";\n// import \"jspdf-autotable\";\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n//   const [jobData, setJobData] = useState([]);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch(\n//         \"https://jsonplaceholder.typicode.com/users\"\n//       );\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5003/other_data\");\n//       const data = await response.json();\n//       setJobData(data);\n//       const csvData = JSON.stringify(data, null, 2);\n//       setCsvData(csvData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const downloadCSV = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5003/latest_jobs\");\n//       const data = await response.json();\n\n//       let csvData = \"\";\n//       if (Array.isArray(data) && data.length > 0) {\n//         const headers = Object.keys(data[0]);\n//         csvData += headers.join(\",\") + \"\\n\";\n\n//         data.forEach((row) => {\n//           const values = headers.map((header) => {\n//             const value = row[header];\n//             return typeof value === \"string\" ? `\"${value}\"` : value;\n//           });\n//           csvData += values.join(\",\") + \"\\n\";\n//         });\n//       }\n\n//       const formattedCSVData = formatCSV(csvData);\n\n//       const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//         formattedCSVData\n//       )}`;\n//       const a = document.createElement(\"a\");\n//       a.href = href;\n//       a.download = \"job_data.csv\";\n//       a.click();\n//     } catch (error) {\n//       console.error(\"Error fetching job data:\", error);\n//     }\n//   };\n\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Date</th>\n//               <th>File Name</th>\n//               <th>Company URL</th>\n\n//               <th>Download</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//           {jobData && (\n//   <tr>\n//     <td>{jobData.date}</td>\n//     <td>{jobData.filename}</td>\n//     <td>{jobData.website}</td>\n//     <td>\n//       <button\n//         onClick={() => {\n//           downloadCSV();\n//         }}\n//         className=\"btn\"\n//       >\n//         download\n//       </button>\n//     </td>\n//   </tr>\n// )}\n\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading Job Data...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// Last Commit code\n\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//         fetchData();\n//         fetchDataa();\n\n//         const intervalId = setInterval(() => {\n//           setCurrentIndex((prevIndex) => prevIndex + 1);\n//         }, 5 * 1000); // 10-second interval\n\n//         return () => clearInterval(intervalId);\n//       }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://192.168.1.108:5000\");\n//       const data = await response.json();\n//       const csvData = JSON.stringify(data, null, 2);\n//       setCsvData(csvData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const downloadCSV = () => {\n//     const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//       csvData\n//     )}`;\n//     const a = document.createElement('a');\n//     a.href = href;\n//     a.download = 'filename.csv';\n//     a.click();\n//   };\n\n//   const formatCSV = (csvData) => {\n//     const lines = csvData.split('\\n');\n//     const formattedLines = [];\n//     for (let i = 0; i < lines.length; i++) {\n//       const line = lines[i];\n//       const formattedLine = line.split(',');\n//       formattedLine = formattedLine.map((cell) => {\n//         return cell.trim();\n//       });\n//       formattedLines.push(formattedLine);\n//     }\n//     return formattedLines.join('\\n');\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// // Jitnaw office mey hoa tha yay wo code hey.\n\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [dataInCSV, setDataInCSV] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n//   const fetchDataa = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000\");\n//       const data = await response.text();\n//       setDataInCSV(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td className=\"btn\">\n\n//                   {dataInCSV && (\n//                     <a\n//                       href={`data:text/csv;charset=utf-8,${encodeURIComponent(dataInCSV)}`}\n//                       download=\"filename.csv\"\n//                     >\n//                       download\n//                     </a>\n//                   )}\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n////////////////////\n// import React, { useEffect, useState } from 'react';\n// import './Dashboard.css';\n// import jsPDF from 'jspdf';\n// import 'jspdf-autotable';\n\n// const Dashboard = () => {\n//   const [userData, setUserData] = useState([]);\n//   const [csvData, setCsvData] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     fetchData();\n//     fetchDataa();\n\n//     const intervalId = setInterval(() => {\n//       setCurrentIndex((prevIndex) => prevIndex + 1);\n//     }, 5 * 1000); // 10-second interval\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch('https://jsonplaceholder.typicode.com/users');\n//       const jsonData = await response.json();\n//       setUserData(jsonData);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n//............................................................. koi ek chalao\n// const fetchDataa = async () => {\n//   try {\n//     const response = await fetch(\"http://127.0.0.1:5000\");\n//     const data = await response.text();\n//     setDataInCSV(data);\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//   }\n// };\n// const downloadCSV = () => {\n//   const href = `data:text/csv;charset=utf-8,${encodeURIComponent(dataInCSV)}`;\n//   const a = document.createElement('a');\n//   a.href = href;\n//   a.download = 'filename.csv';\n//   a.click();\n// };\n\n//...................................................\n// const fetchDataa = async () => {\n//   try {\n//     const response = await fetch(\"http://127.0.0.1:5000\");\n//     const data = await response.json();\n//     const csvData = JSON.stringify(data, null, 2);\n//     const formattedData = formatCSV(csvData);\n//     csvData = formattedData;\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//   }\n// };\n\n// const downloadCSV = () => {\n//   const href = `data:text/csv;charset=utf-8,${encodeURIComponent(\n//     csvData\n//   )}`;\n//   const a = document.createElement('a');\n//   a.href = href;\n//   a.download = 'filename.csv';\n//   a.click();\n// };\n\n// const formatCSV = (csvData) => {\n//   const lines = csvData.split('\\n');\n//   const formattedLines = [];\n//   for (let i = 0; i < lines.length; i++) {\n//     const line = lines[i];\n//     const formattedLine = line.split(',');\n//     formattedLine = formattedLine.map((cell) => {\n//       return cell.trim();\n//     });\n//     formattedLines.push(formattedLine);\n//   }\n//   return formattedLines.join('\\n');\n// };\n\n//....................................................\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Dashboard</h1>\n//       {userData.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Username</th>\n//               <th>Email</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {userData.slice(0, currentIndex + 1).map((user, index) => (\n//               <tr key={index}>\n//                 <td>{user.name}</td>\n//                 <td>{user.username}</td>\n//                 <td>{user.email}</td>\n//                 <td>\n//                   <button\n//                     onClick={() => {\n//                       downloadCSV();\n//                     }}\n//                     className=\"btn\"\n//                   >\n//                     download\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n"],"mappings":";;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}