// import React, { useEffect, useState } from 'react';
// import './Dashboard.css';
// import jsPDF from 'jspdf';
// import 'jspdf-autotable';

// const Dashboard = () => {
//   const [userData, setUserData] = useState([]);
//   const [currentIndex, setCurrentIndex] = useState(0);

//   useEffect(() => {
//     fetchData();

//     const intervalId = setInterval(() => {
//       setCurrentIndex((prevIndex) => (prevIndex + 1) % userData.length);
//     }, 10 * 1000); // 1 minute interval

//     return () => clearInterval(intervalId);
//   }, []);

//   const fetchData = async () => {
//     try {
//       const response = await fetch('https://jsonplaceholder.typicode.com/users');
//       const jsonData = await response.json();
//       setUserData(jsonData);
//     } catch (error) {
//       console.error('Error fetching data:', error);
//     }
//   };

//   const downloadPDF = () => {
//     if (userData.length > 0) {
//       const doc = new jsPDF();
//       const columns = Object.keys(userData[0]);
//       const tableData = userData.map((user) => Object.values(user));

//       doc.autoTable({
//         head: [columns],
//         body: tableData
//       });

//       doc.save('dashboard.pdf');
//     }
//   };

//   return (
//     <div className="dashboard">
//       <h1>Dashboard</h1>
//       {userData.length > 0 ? (
//         <table>
//           <thead>
//             <tr>
//               <th>Name</th>
//               <th>Username</th>
//               <th>Email</th>
//               <th>Action</th>
//             </tr>
//           </thead>
//           <tbody>
//             {userData.slice(0, currentIndex + 1).map((user, index) => (
//               <tr key={index}>
//                 <td>{user.name}</td>
//                 <td>{user.username}</td>
//                 <td>{user.email}</td>
//                 {index === currentIndex && (
//                   <td>
//                     <button onClick={downloadPDF}>Download</button>
//                   </td>
//                 )}
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       ) : (
//         <p>Loading...</p>
//       )}
//     </div>
//   );
// };

// export default Dashboard;


// const yaYCodeSahiHey = 10;

// yay set code hey FileSystemHandle.apply


// import React, { useEffect, useState } from 'react';
// import './Dashboard.css';
// import jsPDF from 'jspdf';
// import 'jspdf-autotable';

// const Dashboard = () => {
//   const [userData, setUserData] = useState([]);
//   const [currentIndex, setCurrentIndex] = useState(0);

//   useEffect(() => {
//     fetchData();
  
//     const intervalId = setInterval(() => {
//       setCurrentIndex((prevIndex) =>prevIndex + 1);     //(prevIndex + 1) <= userData.length);
//     }, 2 * 1000); // 10-second interval                    70*60*60*1000 = 3 Days
  
//     return () => clearInterval(intervalId);
//   }, []);
  

//   const fetchData = async () => {
//     try {
//       const response = await fetch('https://jsonplaceholder.typicode.com/users');
//       const jsonData = await response.json();
//       setUserData(jsonData);
//     } catch (error) {
//       console.error('Error fetching data:', error);
//     }
//   };

//   const downloadPDF = async () => {
//     if (userData.length > 0) {
//       const doc = new jsPDF();
//       const response = await fetch('https://jsonplaceholder.typicode.com/comments');
//       const jsonData = await response.json();

//       const columns = Object.keys(jsonData[0]);
//       const tableData = jsonData.map((item) => Object.values(item));

//       doc.autoTable({
//         head: [columns],
//         body: tableData
//       });

//       doc.save('dashboard.pdf');
//     }
//   };

//   return (
//     <div className="dashboard">
//       <h1>Dashboard</h1>
//       {userData.length > 0 ? (
//         <table>
//           <thead>
//             <tr>
//               <th>WebSite</th>
//               <th>Name</th>
//               <th>Email</th>
//               <th>Action</th>
//             </tr>
//           </thead>
//           <tbody>
//             {userData.slice(0, currentIndex + 1).map((user, index) => (
//               <tr key={index}>
//                 <td>{user.name}</td>
//                 <td>{user.username}</td>
//                 <td>{user.email}</td>
//                 {index === currentIndex && (
//                   <td>
//                     <button onClick={downloadPDF}>Download</button>
//                   </td>
//                 )}
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       ) : (
//         <p>Loading...</p>
//       )}
//     </div>
//   );
// };

// export default Dashboard;


const yahnseyperfectcodehey = 1;

// import React, { useEffect, useState } from 'react';
// import './Dashboard.css';
// import jsPDF from 'jspdf';
// import 'jspdf-autotable';

// const Dashboard = () => {
//   const [userData, setUserData] = useState([]);
//   const [currentIndex, setCurrentIndex] = useState(0);

//   useEffect(() => {
//     fetchData();

//     const intervalId = setInterval(() => {
//       setCurrentIndex((prevIndex) => prevIndex + 1);
//     }, 2 * 1000); // 10-second interval

//     return () => clearInterval(intervalId);
//   }, []);

//   const fetchData = async () => {
//     try {
//       const response = await fetch('https://jsonplaceholder.typicode.com/users');
//       const jsonData = await response.json();
//       setUserData(jsonData);
//     } catch (error) {
//       console.error('Error fetching data:', error);
//     }
//   };

//   // const downloadPDF = (user) => {
//   //   const doc = new jsPDF();
//   //   const columns = Object.keys(user);
//   //   const tableData = [Object.values(user)];

//   //   doc.autoTable({
//   //     head: [columns],
//   //     body: tableData
//   //   });

//   //   doc.save('dashboard.pdf');
//   // };

//   const downloadPDF = async () => {
//     if (userData.length > 0) {
//       const doc = new jsPDF();
//       const response = await fetch('https://jsonplaceholder.typicode.com/comments');
//       const jsonData = await response.json();

//       const columns = Object.keys(jsonData[0]);
//       const tableData = jsonData.map((item) => Object.values(item));

//       doc.autoTable({
//         head: [columns],
//         body: tableData
//       });

//       doc.save('dashboard.pdf');
//     }
//   };

//   return (
//     <div className="dashboard">
//       <h1>Dashboard</h1>
//       {userData.length > 0 ? (
//         <table>
//           <thead>
//             <tr>
//               <th>Name</th>
//               <th>Username</th>
//               <th>Email</th>
//               <th>Action</th>
//             </tr>
//           </thead>
//           <tbody>
//             {userData.slice(0, currentIndex + 1).map((user, index) => (
//               <tr key={index}>
//                 <td>{user.name}</td>
//                 <td>{user.username}</td>
//                 <td>{user.email}</td>
//                 <td>
//                   <button onClick={() => downloadPDF(user)}>Download</button>
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       ) : (
//         <p>Loading...</p>
//       )}
//     </div>
//   );
// };

// export default Dashboard;



  // const downloadPDF = () => {
  //   const doc = new jsPDF();
  //   const columns = Object.keys(data.job_data[0]);
  //   const tableData = data.job_data.map((item) => Object.values(item));

  //   doc.autoTable({
  //     head: [columns],
  //     body: tableData,
  //   });

  //   doc.save('dashboard.pdf');
  // };

  // const downloadPDF = (user) => {
  //   const doc = new jsPDF();
  //   const columns = Object.keys(user);
  //   const tableData = [Object.values(user)];

  //   doc.autoTable({
  //     head: [columns],
  //     body: tableData
  //   });

  //   doc.save('dashboard.pdf');
  // };



  ///
  //office wala hey with Danial
// import React, { useEffect, useState } from 'react';
// import './Dashboard.css';
// import jsPDF from 'jspdf';
// import 'jspdf-autotable';
// import job_data from './../db.json';

// const Dashboard = () => {
//   const [userData, setUserData] = useState([]);
//   const [currentIndex, setCurrentIndex] = useState(0);

//   useEffect(() => {
//     fetchData();

//     const intervalId = setInterval(() => {
//       setCurrentIndex((prevIndex) => prevIndex + 1);
//     }, 2 * 1000); // 10-second interval

//     return () => clearInterval(intervalId);
//   }, []);

//   const fetchData = async () => {
//     try {
//       const response = await fetch('https://jsonplaceholder.typicode.com/users');
//       const jsonData = await response.json();
//       setUserData(jsonData);
//     } catch (error) {
//       console.error('Error fetching data:', error);
//     }
//   };


//   const downloadPDF = async (user) => {
//     if (userData.length > 0) {
//       const doc = new jsPDF();
  
//       try {
//         const response = await fetch('http://172.190.91.62:5000/');
//         const textData = await response.text();
  
//         if (textData) {
//           let jsonDataa = JSON.parse(textData);
//           const jsonData = jsonDataa.job_data;
  
//           if (Array.isArray(jsonData) && jsonData.length > 0) {
//             const columns = Object.keys(jsonData[0]);
//             const tableData = jsonData.map((item) => Object.values(item));
  
//             doc.autoTable({
//               head: [columns],
//               body: tableData,
//             });
  
//             doc.save('dashboard.pdf');
//           } else {
//             console.error('Invalid data from API');
//           }
//         } else {
//           console.error('Empty response from API');
//         }
//       } catch (error) {
//         console.error('Error fetching PDF data:', error);
//       }
//     }
//   };
  
  

//   return (
//     <div className="dashboard">
//       <h1>Dashboard</h1>
//       {userData.length > 0 ? (
//         <table>
//           <thead>
//             <tr>
//               <th>Name</th>
//               <th>Username</th>
//               <th>Email</th>
//               <th>Action</th>
//             </tr>
//           </thead>
//           <tbody>
//             {userData.slice(0, currentIndex + 1).map((user, index) => (
//               <tr key={index}>
//                 <td>{user.name}</td>
//                 <td>{user.username}</td>
//                 <td>{user.email}</td>
//                 <td className="btn">
//                   <button onClick={() => downloadPDF(user)}>Download</button>
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       ) : (
//         <p>Loading...</p>
//       )}
//     </div>
//   );
// };

// export default Dashboard;